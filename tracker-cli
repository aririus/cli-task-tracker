#!/usr/bin/env python3
import sys
import json
import os
from datetime import datetime

TASKS_FILE = 'tasks.json'

def load_tasks():
    if not os.path.exists(TASKS_FILE):
        return []
    with open(TASKS_FILE, 'r') as f:
        return json.load(f)

def save_tasks(tasks):
    with open(TASKS_FILE, 'w') as f:
        json.dump(tasks, f, indent=2)
    
def get_next_id(tasks):
    if not tasks:
        return 1
    return max(task["id"] for task in tasks) + 1

def add_task(description):
    tasks = load_tasks()
    task_id = get_next_id(tasks)
    now = datetime.now().isoformat()
    
    task = {
        "id": task_id,
        "description": description,
        "status": "todo",
        "createdAt": now,
        "updatedAt": now
    }
    
    tasks.append(task)
    save_tasks(tasks)
    
    print(f"Task added successfully (ID:{task_id})")
    
def print_task(task):
    print(f"ID: {task['id']}")
    print(f"Description: {task['description']}")
    print(f"Status: {task['status']}")
    print(f"Created At: {task['createdAt']}")
    print(f"Updated At: {task['updatedAt']}")
    print("-" * 40)

def list_tasks(status=None):
    tasks = load_tasks()
    
    if status:
        if status not in ['todo', 'in-progress', 'done']:
            print(f"Invalid status: '{status}'")
            return
        tasks = [task for task in tasks if task['status'] == status]
    
    if not tasks:
        print("No tasks found")
        return
    
    for task in tasks:
        print_task(task)
        
def update_task(task_id, new_description):
    tasks = load_tasks()
    for task in tasks:
        if task["id"] == task_id:
            task["description"] = new_description
            task["updatedAt"] = datetime.now().isoformat()
            save_tasks(tasks)
            print(f"Task {task_id} updated successfully")
            return
    print(f"Task with ID {task_id} not found")
    
def delete_task(task_id):
    tasks = load_tasks()
    new_tasks = [task for task in tasks if task["id"] != task_id]
    
    if len(tasks) == len(new_tasks):
        print(f"Task with ID {task_id} not found")
        return
    
    save_tasks(new_tasks)
    print(f"Task {task_id} deleted successfully")
    
def mark_task_status(task_id, status):
    tasks = load_tasks()
    for task in tasks:
        if task["id"] == task_id:
            task["status"] = status
            task["updatedAt"] = datetime.now().isoformat()
            save_tasks(tasks)
            print(f"Task {task_id} marked as {status}")
            return
    print(f"Task with ID {task_id} not found")
    
def show_help():
    print("""
CLI Task Tracker â€“ Help

Usage:
  tracker-cli <command> [arguments]

Available Commands:
  add <description>                Add a new task
  list                             List all tasks
  list <status>                    List tasks by status: todo, in-progress, done
  update <id> <new description>    Update task description
  delete <id>                      Delete a task by ID
  mark-in-progress <id>            Mark a task as in progress
  mark-done <id>                   Mark a task as done
  help                             Show this help message

Examples:
  tracker-cli add "Buy groceries"
  tracker-cli list
  tracker-cli list done
  tracker-cli update 2 "Buy groceries and cook"
  tracker-cli mark-in-progress 2
  tracker-cli mark-done 2
  tracker-cli delete 2
""")

def main():
    if len(sys.argv) < 2:
        print("Usage: tracker-cli <command> [arguments]")
        return

    command = sys.argv[1]

    if command == 'add':
        if len(sys.argv) < 3:
            print("Usage: tracker-cli add <description>")
            return
        description = ' '.join(sys.argv[2:])
        add_task(description)
        
    elif command == 'list':
        if len(sys.argv) > 3:
            print("Usage: tracker-cli list [status]")
            return
        if len(sys.argv) == 3:
            status = sys.argv[2].lower()
            list_tasks(status)
        else:
            list_tasks()

    elif command == 'update':
        if len(sys.argv) < 4:
            print("Usage: tracker-cli update <id> <new description>")
            return
        try:
            task_id = int(sys.argv[2])
        except ValueError:
            print("Task ID must be a number")
            return
        new_description = ' '.join(sys.argv[3:])
        update_task(task_id, new_description)

    elif command == 'delete':
        if len(sys.argv) != 3:
            print("Usage: tracker-cli delete <id>")
        try:
            task_id = int(sys.argv[2])
        except ValueError:
            print("Task ID must be a number")
            return
        delete_task(task_id)
    
    elif command == 'mark-in-progress':
        if len(sys.argv) != 3:
            print("Usage: tracker-cli mark-in-progress <id>")
            return
        try:
            task_id = int(sys.argv[2])
        except ValueError:
            print("Task ID must be a number")
            return
        mark_task_status(task_id, "in-progress")
        
    elif command == 'mark-done':
        if len(sys.argv) != 3:
            print("Usage: tracker-cli mark-done <id>")
            return
        try:
            task_id = int(sys.argv[2])
        except ValueError:
            print("Task ID must be a number")
            return
        mark_task_status(task_id, "done")
        
    elif command == 'help':
        show_help()

    else:
        print(f"Unknown command: {command}\nSee 'tracker-cli help' for usage")

if __name__ == '__main__':
    main()

